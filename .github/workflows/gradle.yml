name: Java CI with Gradle & Deploy to EC2

# main 브런치에 push가 되면 아래의 flow가 실행됩니다.
on:
  push:
    branches: [ "main" ]
   
# flow에서 사용할 변수 같은 느낌입니다.
env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: escho-github-s3
  CODE_DEPLOY_APPLICATION_NAME: escho-codedeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: escho-codedeploy-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

# 아래의 flow들이 차례대로 실행됩니다.
    steps:
    # 1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3
    
    # 2) JDK 11 셋팅
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        
    # 3) gradlew 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    # 4) gradle 빌드
    - name: Build with Gradle
      run: ./gradlew clean war
      
    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    # AWS S3에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .
          
    # AWS EC2에 Deploy
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
